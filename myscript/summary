# CentOS 7
// restart sshd
systemctl restart sshd.service

// ssh w/o password:
sshd为了安全，对属主的目录和文件权限有所要求。如果权限不对，则ssh的免密码登陆不生效。
用户目录权限为 755 或者 700，就是不能是77x。
.ssh目录权限一般为755或者700。
rsa_id.pub 及authorized_keys权限一般为644
rsa_id权限必须为600

// nfs
yum install -y rpc-bind nfs-utils
systemctl start nfs
systemctl start rpcbind

// show mount info of the host
showmount -e 172.23.5.118


// Whenever we modify /etc/exports, we must run:
exportfs -ra


// disable firewall
systemctl disable firewalld.service

// list all running serivce
systemctl list-units --type=service

// check services
systemctl enable/disable vsftpd.service
systemctl status/start/stop/restart vsftpd.service
systemctl is-enabled vsftpd.service

// open FTP 21 port, line=7. It will be lost after reboot.
iptables -I INPUT 7 -p tcp --dport 21 -j ACCEPT

// Or edit /etc/sysconfig/iptables, add below line, and do enable iptables (also need to disable fireware)
-A INPUT -p tcp --dport 21 -j ACCEPT
systemctl restart iptables
systemctl enable iptables 

# enable samba ports, add below lines to /etc/sysconfig/iptables
-A INPUT -p udp -m multiport --dport 137,138 -j ACCEPT
-A INPUT -p tcp -m multiport --dport 139 -j ACCEPT


# list iptables 
iptables -nL --line-numbers

# disable SELINUX
/etc/selinux/config

# create user for ftp, name=pub, not allowed to login, path=/opt/pub
adduser -d /opt/pub -g ftp -s /sbin/nologin pub


# add route
route add default gw 192.168.191.1



# change to root to execute it.
echo 'core.%e.%p' > /proc/sys/kernel/core_pattern


# Check if core dump is enabled (note: if enable program by using script, this cmd must be called in the script, otherwise core dump can not be generated)

ulimit -c

# -- enable core dump
ulimit -c unlimited

# How to use top
top

1(数字1)： 显示每个CPU的详细情况   
m： 显示内存信息
t： 显示进程和CPU状态信息（即显示影藏CPU行）
T： 根据进程使用CPU的累积时间排序

M： 根据内存资源使用大小进行排序
P： 根据CPU资源使用大小进行排序
N： 按PID由高到低排列

c： 显示完整的命令
d： 更改刷新频率
s： 设置刷新频率（默认单位为秒，如有小数则换算成ms）。默认值是5s，输入0值则系统将不断刷新
f： 增加或减少要显示的列(选中的会变成大写并加*号)


# top the processes with key word "ksoft"
top -p $(echo $(pgrep ksoft) | tr " " ",")


# unzip the .iso file
mount -o loop xxx.iso /mnt/tmp

# How to solve "device is busy" in umount
lsof /mnt/123    // your mount point, then kill the users

# How to chech which port is LISTEN
lsof -P | grep LISTEN
or
ss -tulpn | grep LISTEN
or
netstat -an | grep LISTEN


# check the disk partitions
du -lh
fdisk -l


# show notation of each end of line 
cat -e file

# sort by file size
ll -S
# sort by modified time
ll -t
# human readable, with -l and -s, print sizes like 1K 234M 2G etc.
ll -h


# solve the problem that can not ping vlan interface (under xen) with bigger packet size (>1476), this is a bug of linux kernel.
echo 0 > /proc/sys/net/bridge/bridge-nf-call-iptables
sysctl -w "net.bridge.bridge-nf-call-iptables=0"


# list the thread by cpu consumption
ps H -eo user,pid,ppid,tid,time,%cpu,cmd --sort=%cpu

# count the lines...
wc -l <file>
wc -l `find -name "*.cpp"` | tail -n1

# count and ignore empty lines
find /demo -name "*.js" |xargs cat|grep -v ^$|wc -l

# find string with "bcm_" start and "_oam_ais_add" end
grep -r "^\<bcm_.*_oam_ais_add\>"

# find string with "start" and following any value in A-Z, a-z, 0-9
grep -r  ",[A-Za-z0-9]"

// good example to count codes lines, ignoring comments
grep -cvE '(^\s*[/*])|(^\s*$)' <file>

-c = count
-v = exclude
-E = extended regex
'(comment lines) OR (empty lines)'
where
^    = beginning of the line
\s   = whitespace
*    = any number of previous characters or none
[/*] = either / or *
|    = OR
$    = end of the line



# diff and patch
diff -Naur r51/software/app/hal/halmgr/ r51_tmp/software/app/hal/halmgr/ > patchfile
patch -p1 < patchfile



# Apply a SVN change: e.g. merge the change from r100 to r101 to my branch
#
# way 1: svn diff then apply patch
svn di -r 100:101  https://advactfdev.com/svn/repos/fsp150cm/branches/software/r8.2egx/dev/software/app > patchfile

// go to my branch software, e.g. 9.1, then apply the patch
patch -p0 -d app < patchfile
svn ci

# way 2: svn merge way
svn merge --force --non-interactive -r100:101 https://advactfdev.com/svn/repos/fsp150cm/branches/software/r8.2egx/dev/software/app .svn ci 


# count the code lines for .cc files in the current path.
ll | grep .cc$ | awk '{print $9}' | while read f; do wc -l $f; done 

# search a line with only "nte"
grep "^nte$" file

# search the the exact line "nte", the case "nnte" or "ntee" is bypassed
grep "\bnte\b" file


# import RPM GDP signing key which is used to sign packages. Then can use yum install <package>
rpm --import RPM-GPG-KEY-CentOS-5 

yum insall gdb  # for example
yum -qa |grep xxx
rpm -ivh  // install
rpm -Uvh  // upgrade 
rpm -e    // erase


# show hard partition and  usage
df -lh


# make VI work properly at board
export TERM=vt102


# check process Rcv/Snd Q state (for debug)
netstat -pa | grep hal


# lookup "alias" from all Makefile under /.
find / -name "Makefile" | xargs grep "alias"

# search all CVS and delete it
find ../dir -name CVS -type d -exec rm -rf {} \;

# lookup "abc" or "123" at file, and print the line number
grep -nE "abc|123" file


# check in with local file commit failed last time
svn commit -F svn-commit.tmp


# clear linux cache
sync
echo 3 > /proc/sys/vm/drop_caches


# capture pkt
tcpdump udp src and dst portrange 10-20 -e -vv and host 192.168.1.3
tcpdump -vvv -e -i eth0

tcpdump -i eth0 -vvvXX icmp  // vvv: as much info as possbible, XX: show packet content, incl. eth header



# add static ARP entry
arp -i ptp1 -s 10.0.0.1 00:01:02:03:04:05


# Makefile to check if TGT_UNIT is nti or eos
ifeq ($(TGT_UNIT), $(filter $(TGT_UNIT), nti, eos))
  OBJS += test.o
endif

# set prope for opt folder (ignore eos and eos_sim)
svn ps svn:ignore eos eos_sim opt

# get prope of opt
svn pl opt -v

# get svn externals
svn pg svn:externals -R

# don't show lines with X started
svn st -q |grep -v '^X'



# delete all empty blank lines for a file
way1:  grep -v '^$' file
way2:  sed '/^$/d'  file 
way3:  sed -n '/./p' file
way4:  awk '/./ {print}' file


# check if OS is 32b or 64b
way1: getconf LONG_BIT
way2: file /bin/ls

# check if lib file is 32b or 64b
objdump -a *.so // or .a
readelf -f *.a

file *.so // only dynamical lib

# check if a library was compiled with -g
objdump -g *.a //There should be an entry for each object file in the library if w/o -g.


# list the needed lib
readelf -d libTest.so | grep NEEDED

# list symbols
nm *.so

# translate TOD time to /Y/M/D
date -d @123456789


# uncompress 
.tar.gz    //tar -zxvf xx.tar.gz

.tar.bz2  // tar -jxvf xx.tar.bz2


# change file name in batch
# e.g. change file with Sync in name to Timing
rename 'Sync' 'Timing' *


### HOWTO compile 32b app at 64b machine
yum list *glibc*

yum install glibc.i686
yum install glibc-devel.i686
yum install libstdc++.i686


### HOWTO Statically Compiling C/C++ Programs on CentOS 7
# e.g. if -static is specified in LDFLAGS, then the static version of glibc, libstdc++ is needed.
yum -y install glibc-static libstdc++-static


### HOWTO ssh w/o password
1)at server, edit etc/ssh/sshd_config to enable below stuff
RSAAuthentication yes
PubkeyAuthentication yes
AuthorizedKeysFile .ssh/authorized_keys

2)at server, do below:
mkdir .ssh
chmod 700 .ssh   //make sure 700

touch .ssh/authorized_keys
chmod 600 .ssh/authorized_keys  // make sure 600

3) at client, run "ssh-kengen -t rsa" to generate key file
4) copy "id_rsa.pub" context to server's .ssh/authorized_keys

### HOWTO disable client to SSH to your shell, e.g. only allow to access git.
# edit server's /etc/passwd and find your user, 
bcm:x:1002:1002::/home/bcm:/bin/bash  --> below
bcm:x:1002:1002::/home/bcm:/usr/bin/git-shell


### HOWTO doxygen
doxygen -g myconfig  # to generate config file

#edit myconfig to update below things:
PROJECT_NAME = // project name
OUTPUT_DIRECTORY = mydoc // the folder to generate docs
GENERATE_LATEX = NO // do not generate LaTex 
FILE_PATTERNS = *.hpp *.h  // the file typs to scan
RECURSIVE = YES  // to recursive sub dirs

# to generate docs
doxygen myconfig


### HOWTO cscope, assuming the source dir is <dir>
find <dir> -name *.hpp -o -name *.cpp > cscope.files  
cscope -Rbqk -i cscope.files
# then :cs add <dir>/cscope.out  to load db


##########################
### HOWTO tmux usage
##########################
tmux lscm  // show all tmux commands

# session command
tmux new -s test           // create a session called test

tmux attach -t test        // attach to session
tmux kill-session -t test  // delete session
tmux ls                    // list sessions

# windows
C-b c       // new window
C-b n or p  // next/prev window
C-b &       // close window
C-b d       // save session and exit, tmux is still running

# in a window, wecan split into panes
C-b %       // split pane horizontally
C-b "       // split pane vertically
C-b <arrow> // switch panes
C-b x       // close pane

C-b t       // show clock


##########################
### HOWTO vim
##########################

# 1) mics
vim -o file1 file2  // 水平打开2个文件
vim -O file1 file2  // 垂直打开2个文件

# 2) Edit
diw/yiw/ciw/view     // delete/copy/cut/view current word, (copy inner word)

ct.     // （将当前光标到 . (点) 之间的内容删除并进入 insert mode 准备修改）
ci"     //（这个命令会找到当前光标所在行的下一个 " 括起来的字符串，清除引号裏面的内容，并进入 insert mode）

ggguG   // 整篇大写转换为小写
gggUG   // 整篇小写转换为大写
guw     // 将光标下的词改为小写
gUw     // 将光标下的词改为小写
guu     // 将当前行的字母改为小写
gUU     // 将当前行的字母改为大写

:g/123/s//456/g //全局将123替换成456

# 3) search
/\<xxx\>  //全字匹配

# -------------------------------------------------------------
# CentOS Install vim-8.0
# -------------------------------------------------------------
yum install ncurses-devel
wget https://github.com/vim/vim/archive/master.zip
unzip master.zip
cd vim-master
cd src/
sudo ./configure --with-features=huge --enable-multibyte  --enable-python3interp 
       --with-python3-config-dir=/usr/lib64/python3.6/config-3.6m-x86_64-linux-gnu  
       --enable-pythoninterp --with-python-config-dir=/usr/lib/python2.7/config  
       --enable-fail-if-missing
sudo make
sudo make install

# -------------------------------------------------------------
# CentOS: If install YouCompleteMe failed, try to update gcc.
# -------------------------------------------------------------
# To get the version
yum install -y redhat-lsb

# Standard dev tools
yum groupinstall -y "Development tools"

# Install devtoolset-6
yum install -y centos-release-scl
yum install -y devtoolset-6

# Activate it
source /opt/rh/devtoolset-6/enable

# -------------------------------------------------------------
# Install Vundle 
# -------------------------------------------------------------
mkdir ~/.vim
git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim


# -------------------------------------------------------------
# GDB debug
# -------------------------------------------------------------
# turn off SIGQUIT
handle SIGQUIT nostop


# show threads
info threads

# show shared library
info sharedlibrary



# clang format all files, need to run it at EDE
find . -name '*.h' -o -name '*.hpp' -o -name '*.hxx' -o -name '*.cpp' -o -name '*.c' | xargs clang-format -i



# -------------------------------------------------------------
# Show git branch name in shell, add below stuff to .bashrc
# -------------------------------------------------------------

## Parses out the git branch name from .git/HEAD:
#---- start
find_git_branch () {
    local dir=. head
    until [ "$dir" -ef /  ]; do
        if [ -f "$dir/.git/HEAD"  ]; then
            head=$(< "$dir/.git/HEAD")
            if [[ $head = ref:\ refs/heads/*  ]]; then
                git_branch=" → ${head#*/*/}"
            elif [[ $head != ''  ]]; then
                git_branch=" → (detached)"
            else
                git_branch=" → (unknow)"
            fi  
            return
        fi  
        dir="../$dir"
    done
    git_branch=''
}

PROMPT_COMMAND="find_git_branch; $PROMPT_COMMAND"

# Here is bash color codes you can use
black=$'\[\e[1;30m\]'
red=$'\[\e[1;31m\]'
green=$'\[\e[1;32m\]'
yellow=$'\[\e[1;33m\]'
blue=$'\[\e[1;34m\]'
magenta=$'\[\e[1;35m\]'
cyan=$'\[\e[1;36m\]'
white=$'\[\e[1;37m\]'
normal=$'\[\e[m\]'
 
PS1="$white[$magenta\u$white@$green\h$white:$cyan\W$yellow\$git_branch$white]\$ $normal"

# In case of AOS EDE, use below PS1
#PS1="\[\033[01;32m\]\u@$(cat /etc/ede/ede_version) $EDE_NAME\[\033[01;34m\] \w$yellow\$git_branch$blue \n\$\[\033[00m\]"
#--- end
